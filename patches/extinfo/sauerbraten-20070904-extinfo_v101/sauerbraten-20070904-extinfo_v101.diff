--- src/fpsgame/fpsserver.h	2007-09-04 01:25:38.000000000 +0200
+++ src/fpsgame/fpsserver.h	2007-10-15 15:53:37.000000000 +0200
@@ -75,7 +75,9 @@ struct fpsserver : igameserver
         int lastdeath, lastspawn, lifesequence;
         int lastshot;
         int rockets, grenades;
-        int frags;
+        //***************** BEGIN OF MODIFICATION **********************
+        int frags, teamkills, deaths, totalfrags;  //NEW teamkills, deaths and totalfrags
+        //***************** END OF MODIFICATION **********************
         int lasttimeplayed, timeplayed;
         float effectiveness;
 
@@ -97,6 +99,12 @@ struct fpsserver : igameserver
             effectiveness = 0;
             frags = 0;
 
+            //***************** BEGIN OF MODIFICATION **********************
+            teamkills = 0;  //NEW teamkills
+            deaths = 0;     //NEW deaths, within suicid
+            totalfrags = 0; //NEW totalfrags, all frags without teamkills
+            //***************** END OF MODIFICATION **********************
+
             respawn();
         }
 
@@ -1527,6 +1535,19 @@ struct fpsserver : igameserver
         }
         if(ts.health<=0)
         {
+            //***************** BEGIN OF MODIFICATION **********************
+            if(actor->clientnum == target->clientnum && m_teammode) {
+                target->state.deaths++; //suicid
+            };
+            if(actor->clientnum != target->clientnum && ((m_teammode && !(strcmp(actor->team,target->team)==0)) || !m_teammode)) {
+                actor->state.totalfrags++; //counts frags without teamkills
+                target->state.deaths++;    //counts deathes (killed by another player)
+            };
+            if(actor->clientnum != target->clientnum && m_teammode && (strcmp(actor->team,target->team)==0)) {
+                actor->state.teamkills++;	//counts teamkills
+            };
+            //***************** END OF MODIFICATION ************************
+
             if(target!=actor && (!m_teammode || strcmp(target->team, actor->team)))
             {
                 actor->state.frags++;
@@ -1552,6 +1573,9 @@ struct fpsserver : igameserver
         gamestate &gs = ci->state;
         if(gs.state!=CS_ALIVE) return;
         gs.frags--;
+        //***************** BEGIN OF MODIFICATION **********************
+        gs.deaths++; //NEW counts deathes (suicid)
+        //***************** END OF MODIFICATION ************************
         sendf(-1, 1, "ri4", SV_DIED, ci->clientnum, ci->clientnum, gs.frags);
         ci->position.setsizenodelete(0);
         if(smode) smode->died(ci, NULL);
@@ -1882,4 +1906,76 @@ struct fpsserver : igameserver
         s_sprintf(cname)("%s \fs\f5(%d)\fr", name, ci->clientnum);
         return cname;
     }   
+
+
+//*****************************************************************************
+//    Server Info Port
+//*****************************************************************************
+
+    bool serverinfostats(ucharbuf &p,int num)
+    {
+        clientinfo *ci = (clientinfo *)getinfo(num);
+        if(!ci) return(false);       //client doesnt exists
+        sendstring(ci->name,p);         //add name
+        sendstring(ci->team,p);         //add team
+        putint(p,ci->state.totalfrags); //add frags
+        putint(p,ci->state.deaths);     //add deaths
+        putint(p,ci->state.teamkills);  //add teamkills
+        putint(p,ci->state.health);     //add health
+        putint(p,ci->state.armour);     //add armour
+        putint(p,ci->state.gunselect);  //add gun selected
+        putint(p,ci->privilege);        //add privilege (None,Master,Admin)
+        putint(p,ci->state.state);      //add status (Alive,Dead,Spawning,Lagged,
+                                        //            Editing,Spectator)
+        return(true);                //client exists
+    }
+
+    void serverinfoteamscore(ucharbuf &p)
+    {
+        if(!m_teammode)
+        {
+            putint(p,1); //add error flag
+            putint(p,minremain);  //add remaining play time
+            return;
+        }
+
+        putint(p,0); //add no error flag
+
+        cvector teams;
+        bool flag;
+
+        loopv(clients)  //get available teams
+        {
+            flag = true;
+            loopvj(teams)
+            {
+                if(strcmp(clients[i]->team,teams[j])==0 || !clients[i]->team[0])
+                {
+                    flag = false;
+                    break;
+                }
+            }
+            if(flag) teams.add(clients[i]->team);
+        }
+
+        putint(p,minremain); //add remaining play time
+
+        if(m_capture) { //when capture mode
+            loopv(teams) {
+                sendstring(teams[i],p); //team
+                putint(p,capturemode.findscore(teams[i]).total); //capture score
+            }
+        }else { //all other teammodes
+            loopv(teams) {
+                sendstring(teams[i],p); //team
+                int score = 0;
+                loopvj(clients) {
+                    if(strcmp(teams[i],clients[j]->team)==0) {
+                        score += clients[j]->state.frags;
+                    }
+                }
+                putint(p,score); //team score
+            }
+        }
+    }
 };
--- src/engine/server.cpp	2007-08-14 20:56:09.000000000 +0200
+++ src/engine/server.cpp	2007-10-15 12:48:53.000000000 +0200
@@ -349,6 +349,47 @@ int localclients = 0, nonlocalclients = 
 bool hasnonlocalclients() { return nonlocalclients!=0; }
 bool haslocalclients() { return localclients!=0; }
 
+
+//************************ BEGIN OF MODIFICATION ******************************
+#define EXT_ACK                       -1
+#define EXT_VERSION                  101
+#define EXT_ERROR_NONE                 0
+#define EXT_ERROR                      1
+#define EXT_CMD_UPTIME              "ut"
+#define EXT_CMD_PLAYERSTATS         "ps"
+#define EXT_CMD_TEAMSCORES          "ts"
+#define EXT_PLAYERSTATS_RESP_IDS     -10
+#define EXT_PLAYERSTATS_RESP_STATS   -11
+
+#define MAX_EXTENDED_COMMANDS  3
+static string ext_commands[MAX_EXTENDED_COMMANDS] = {
+    EXT_CMD_UPTIME,EXT_CMD_PLAYERSTATS,EXT_CMD_TEAMSCORES
+};
+static int serveruptime = 0;
+/*
+    Modified version of sendpongs
+
+    Send
+    -----
+    A: 0 "ut"
+    B: 0 "ps" pid
+    C: 0 "ts"
+
+    Receive
+    --------
+    A: -1 101 uptime
+    B: -1 101 0 -10 (..pid's..) [only 1 Packet]
+       -1 101 0 -11 pid "name" "team" frags death teamkills health armour
+                        gun_selected privilege status
+    C: -1 101 0 "team" score
+
+    Receive error
+    --------------
+    B: -1 101 1
+    C: -1 101 1 rtime
+    default: -1 101 1
+
+*/
 void sendpongs()        // reply all server info requests
 {
     ENetBuffer buf;
@@ -357,17 +398,112 @@ void sendpongs()        // reply all ser
     int len;
     enet_uint32 events = ENET_SOCKET_WAIT_RECEIVE;
     buf.data = pong;
+
     while(enet_socket_wait(pongsock, &events, 0) >= 0 && events)
     {
         buf.dataLength = sizeof(pong);
         len = enet_socket_receive(pongsock, &addr, &buf, 1);
         if(len < 0) return;
+
         ucharbuf p(&pong[len], sizeof(pong)-len);
-        sv->serverinforeply(p);
+        ucharbuf t(pong, sizeof(pong));
+
+        int flag = getint(t);
+        if (flag == 0) {  //check the flag
+            string extcmd;
+            getstring(extcmd,t,_MAXDEFSTR);  //get the command string which says what to do
+
+            int position = 0;
+            for(int i=0;i<MAX_EXTENDED_COMMANDS;i++) {
+                if(strcmp(ext_commands[i],extcmd)==0) { //check which command
+                    position = i;
+                    break;
+                }
+            }
+
+            //Build a new packet
+            putint(p,EXT_ACK);  //insert ack
+            putint(p,EXT_VERSION);  //add stats version
+
+            switch(position) {
+                case 0:  //uptime in seconds
+                {
+                    putint(p,serveruptime/1000);
+                    break;
+                }
+
+                case 1:  //playerstats
+                {
+                    int pid=getint(t);  //get requested player, -1 for all
+
+                    bool err_flag = true;
+                    if(pid>-1) {
+                        loopv(clients) {
+                            if(clients[i]->num == pid) { err_flag=false; break; }
+                        }
+                    }else err_flag = false;
+
+                    if(pid>=clients.length() || err_flag)
+                    {
+                        putint(p,EXT_ERROR);  //add error flag
+                        buf.dataLength = len + p.length();
+                        enet_socket_send(pongsock, &addr, &buf, 1);
+                        return;
+                    }
+
+                    putint(p,EXT_ERROR_NONE);  //add no error flag
+                    int bpos=p.length();  //remember buffer position
+                    putint(p,EXT_PLAYERSTATS_RESP_IDS);  //send player ids following
+
+                    loopv(clients)  //add all available player ids
+                    {
+                        if(pid>-1 && pid!=clients[i]->num) continue;
+                        if(clients[i]->type != ST_EMPTY) putint(p,clients[i]->num);
+                        if(pid>-1) break;
+                    }
+
+                    buf.dataLength = len + p.length();
+                    enet_socket_send(pongsock, &addr, &buf, 1); //send all available player ids
+
+                    p.len=bpos;
+                    loopv(clients)
+                    {
+                        if(clients[i]->type == ST_EMPTY) continue;
+                        if(pid>-1 && clients[i]->num!=pid) continue;
+
+                        putint(p,EXT_PLAYERSTATS_RESP_STATS);  // send player stats following
+                        putint(p,clients[i]->num);  //add player id
+
+                        if(sv->serverinfostats(p,clients[i]->num)) {  //add playerstats
+                            buf.dataLength = len + p.length();
+                            enet_socket_send(pongsock, &addr, &buf, 1);
+                        }
+
+                        if(pid>-1) break;
+                        p.len=bpos;
+                    }
+                    return;
+                }
+
+                case 2:  //teamscores
+                {
+                    sv->serverinfoteamscore(p);  //add team scores
+                    break;
+                }
+
+                default:
+                {
+                    putint(p,EXT_ERROR); //add error flag
+                    break;
+                }
+            }
+        }else sv->serverinforeply(p);
+
         buf.dataLength = len + p.length();
         enet_socket_send(pongsock, &addr, &buf, 1);
     }
 }      
+//*************************** END OF MODIFICATION *****************************
 
 #ifdef STANDALONE
 bool resolverwait(const char *name, ENetAddress *address)
@@ -537,6 +673,9 @@ void serverslice(uint timeout)   // main
     // below is network only
 
     lastmillis = totalmillis = (int)enet_time_get();
+    //***************** BEGIN OF MODIFICATION **********************
+    serveruptime = totalmillis;	//NEW
+    //***************** END OF MODIFICATION ************************
     sv->serverupdate(lastmillis, totalmillis);
 
     sendpongs();
--- src/shared/igame.h	2007-07-30 06:57:45.000000000 +0200
+++ src/shared/igame.h	2007-10-15 12:48:53.000000000 +0200
@@ -101,6 +101,10 @@ struct igameserver
     virtual int serverport() = 0;
     virtual char *getdefaultmaster() = 0;
     virtual void sendservmsg(const char *s) = 0;
+    //***************** BEGIN OF MODIFICATION **********************
+    virtual bool serverinfostats(ucharbuf &p, int num) = 0;	//NEW
+    virtual void serverinfoteamscore(ucharbuf &p) = 0; //NEW
+    //***************** END OF MODIFICATION ************************
 };
 
 struct igame
--- src/rpggame/stubs.h	2007-07-30 06:57:42.000000000 +0200
+++ src/rpggame/stubs.h	2007-10-15 12:48:53.000000000 +0200
@@ -35,4 +35,8 @@ struct rpgdummyserver : igameserver
     int serverport() { return 0; }
     char *getdefaultmaster() { return "localhost"; }
     void sendservmsg(const char *s) {}
+    //***************** BEGIN OF MODIFICATION **********************
+    bool serverinfostats(ucharbuf &p, int num) { return false; } //NEW
+    void serverinfoteamscore(ucharbuf &p) {} //NEW
+    //***************** END OF MODIFICATION ************************
 };
